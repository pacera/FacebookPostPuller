/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package facebookpostpuller;

import com.restfb.Connection;
import com.restfb.DefaultFacebookClient;
import com.restfb.FacebookClient;
import com.restfb.types.User;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;

/**
 *
 * @author RJ
 */
public class FacebookPostPullerGUI extends javax.swing.JFrame implements Observer {

    private PostModel[] models;
    private final int NUMBER_OF_THREADS;

    /**
     * Creates new form AgeGroupClassifierGUI
     */
    public FacebookPostPullerGUI(int numberOfThreads) {
        initComponents();
        this.NUMBER_OF_THREADS = numberOfThreads;
    }

    public void initializeModels(String accessToken) {
        try {
            FacebookClient facebookClient = new DefaultFacebookClient(accessToken);
            Connection<User> myFriends = facebookClient.fetchConnection("me/friends", User.class);
            int friendCount = myFriends.getData().size();
            progressBar.setMinimum(0);
            progressBar.setMaximum(friendCount);
            System.out.println("Friend count: " + friendCount);
            int quo = friendCount / NUMBER_OF_THREADS;
            int rem = friendCount % NUMBER_OF_THREADS;

            int index = 0;
            models = new PostModel[NUMBER_OF_THREADS];
            for (int i = 0; i < NUMBER_OF_THREADS; i++) {
                System.out.println(index);
                boolean[] check = new boolean[5];
                check[0] = chk13.isSelected();
                check[1] = chk18.isSelected();
                check[2] = chk25.isSelected();
                check[3] = chk35.isSelected();
                check[4] = chk45.isSelected();
                
                if (i != NUMBER_OF_THREADS - 1) {
                    PostModel postModel = new PostModel(String.valueOf(i), facebookClient, myFriends, index, index += quo, check);
                    models[i] = postModel;
                } else {
                    PostModel postModel = new PostModel(String.valueOf(i), facebookClient, myFriends, index, index += quo + rem, check);
                    models[i] = postModel;
                }

                System.out.println(index);
            }

            for (PostModel model : this.models) {
                model.addObserver(this);
            }
        } catch (Exception ex) {
            lblStatus.setText("Idle");
            //progressBar.setIndeterminate(false);
            progressBar.setValue(0);
            lblPercentage.setText("0%");
            btnGet.setEnabled(true);
            btnStop.setEnabled(false);
            btnSaveAsArff.setEnabled(false);

            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        try {
            for (PostModel model : models) {
                txtOutput.append(model.getOutputString());
                txtOutput.setCaretPosition(txtOutput.getLineStartOffset(txtOutput.getLineCount() - 1));
                
                progressBar.setValue(PostModel.getProgress());
                NumberFormat formatter = new DecimalFormat("#0.0%");
                lblPercentage.setText(formatter.format(progressBar.getPercentComplete()));
                
            }
        } catch (BadLocationException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtAccessToken = new javax.swing.JTextField();
        btnGet = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        progressBar = new javax.swing.JProgressBar();
        btnStop = new javax.swing.JButton();
        btnSaveAsArff = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        btnRemoveEntries = new javax.swing.JButton();
        lblPercentage = new javax.swing.JLabel();
        chk25 = new javax.swing.JCheckBox();
        chk13 = new javax.swing.JCheckBox();
        chk18 = new javax.swing.JCheckBox();
        chk35 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        chk45 = new javax.swing.JCheckBox();
        btnGetSpecific = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Facebook Post Puller");

        jLabel1.setText("Access Token:");

        btnGet.setText("Get");
        btnGet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setLineWrap(true);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnSaveAsArff.setText("Save as ARFF");
        btnSaveAsArff.setEnabled(false);
        btnSaveAsArff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsArffActionPerformed(evt);
            }
        });

        lblStatus.setText("Idle");

        btnRemoveEntries.setText("Remove Entries");
        btnRemoveEntries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveEntriesActionPerformed(evt);
            }
        });

        lblPercentage.setText("0%");

        chk25.setSelected(true);
        chk25.setText("25-34");

        chk13.setSelected(true);
        chk13.setText("13-17");

        chk18.setSelected(true);
        chk18.setText("18-24");

        chk35.setSelected(true);
        chk35.setText("35-44");

        jLabel2.setText("Age Groups:");

        chk45.setSelected(true);
        chk45.setText("45-54");

        btnGetSpecific.setText("Get Specific");
        btnGetSpecific.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetSpecificActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAccessToken, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chk18)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(chk45))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(chk13)
                                    .addGap(30, 30, 30)
                                    .addComponent(chk35)))
                            .addComponent(jLabel2)
                            .addComponent(chk25)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblPercentage)
                                .addGap(18, 18, 18)
                                .addComponent(lblStatus)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaveAsArff, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(btnGet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveEntries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGetSpecific, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtAccessToken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btnGetSpecific))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk13)
                    .addComponent(chk35)
                    .addComponent(btnStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk18)
                    .addComponent(chk45)
                    .addComponent(btnSaveAsArff))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk25)
                    .addComponent(btnRemoveEntries))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblStatus)
                        .addComponent(lblPercentage)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetActionPerformed
        // TODO add your handling code here:
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                txtOutput.setText("");
                lblStatus.setText("Pulling Posts");
                progressBar.setValue(0);
                lblPercentage.setText("0%");
                btnGet.setEnabled(false);
                btnStop.setEnabled(true);
                btnSaveAsArff.setEnabled(false);
                
                progressBar.setIndeterminate(true);
                initializeModels(txtAccessToken.getText());
                progressBar.setIndeterminate(false);
                progressBar.setValue(0);
                lblPercentage.setText("0%");
                
                if (models != null) {
                    Thread[] threads = new Thread[models.length];
                    int i = 0;
                    for (PostModel model : models) {
                        model.setStopped(false);

                        Thread.UncaughtExceptionHandler h = new Thread.UncaughtExceptionHandler() {
                            @Override
                            public void uncaughtException(Thread th, Throwable ex) {
                                txtOutput.append(ex.getMessage());
                                Logger.getLogger(FacebookPostPullerGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        };
                        Thread thread = new Thread(model);
                        thread.setUncaughtExceptionHandler(h);
                        thread.start();
                        threads[i] = thread;
                        i++;
                    }
                    for (Thread thread : threads) {
                        try {
                            thread.join();
                        } catch (InterruptedException ex) {
                            Logger.getLogger(FacebookPostPullerGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    lblStatus.setText("Idle");
                    //progressBar.setIndeterminate(false);
                    progressBar.setValue(0);
                    lblPercentage.setText("0%");
                    btnGet.setEnabled(true);
                    btnStop.setEnabled(false);

                    boolean hasPostsInMemory = false;
                    for (PostModel model : models) {
                        hasPostsInMemory = model.hasPostsInMemory();
                    }

                    if (hasPostsInMemory) {
                        btnSaveAsArff.setEnabled(true);
                    } else {
                        btnSaveAsArff.setEnabled(false);
                    }
                } else {
                    lblStatus.setText("Idle");
                    //progressBar.setIndeterminate(false);
                    progressBar.setValue(0);
                    lblPercentage.setText("0%");
                    btnGet.setEnabled(true);
                    btnStop.setEnabled(false);
                    btnSaveAsArff.setEnabled(false);
                }
            }
        });
        thread.start();

    }//GEN-LAST:event_btnGetActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        // TODO add your handling code here:
        lblStatus.setText("Stopping");
        btnStop.setEnabled(false);
        
        for (PostModel model : models) {
            model.setStopped(true);
        }
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnSaveAsArffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsArffActionPerformed
        // TODO add your handling code here:
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        FileFilter filter = new FileNameExtensionFilter("ARFF File", "arff");
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(filter);
        int returnValue = fileChooser.showSaveDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            Thread thread = new Thread(new Runnable() {
                @Override
                public void run() {

                    try {
                        lblStatus.setText("Saving");
                        progressBar.setIndeterminate(true);
                        btnGet.setEnabled(false);
                        btnStop.setEnabled(false);
                        btnSaveAsArff.setEnabled(false);

                        PostModel.convertToArff(fileChooser.getSelectedFile());
                        PostModel.saveUserInformationAsCSV(fileChooser.getSelectedFile().getPath());

                        lblStatus.setText("Idle");
                        progressBar.setIndeterminate(false);
                        btnGet.setEnabled(true);
                        btnStop.setEnabled(false);
                        btnSaveAsArff.setEnabled(true);
                    } catch (Exception ex) {
                        lblStatus.setText("Idle");
                        progressBar.setIndeterminate(false);
                        btnGet.setEnabled(true);
                        btnStop.setEnabled(false);
                        btnSaveAsArff.setEnabled(true);
                        Logger.getLogger(PostModel.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
            thread.start();
        }
    }//GEN-LAST:event_btnSaveAsArffActionPerformed

    private void btnRemoveEntriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveEntriesActionPerformed
        // TODO add your handling code here:
        RemoveEntriesGUI removeEntriesGUI = new RemoveEntriesGUI();
        removeEntriesGUI.setVisible(true);
        
    }//GEN-LAST:event_btnRemoveEntriesActionPerformed

    private void btnGetSpecificActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetSpecificActionPerformed
        // TODO add your handling code here:
        GetSpecificGUI getSpecificGUI = new GetSpecificGUI(this, txtAccessToken.getText());
        getSpecificGUI.setVisible(true);
        
    }//GEN-LAST:event_btnGetSpecificActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGet;
    private javax.swing.JButton btnGetSpecific;
    private javax.swing.JButton btnRemoveEntries;
    private javax.swing.JButton btnSaveAsArff;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox chk13;
    private javax.swing.JCheckBox chk18;
    private javax.swing.JCheckBox chk25;
    private javax.swing.JCheckBox chk35;
    private javax.swing.JCheckBox chk45;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPercentage;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtAccessToken;
    private javax.swing.JTextArea txtOutput;
    // End of variables declaration//GEN-END:variables
}
